const { ActionRowBuilder, ButtonBuilder, ButtonStyle, EmbedBuilder, ModalBuilder, TextInputBuilder, TextInputStyle, MessageFlags } = require('discord.js');
const { sendLog } = require('../utils/logger');
const fs = require('fs');
const path = require('path');

// –ó–∞–≥—Ä—É–∑–∫–∞ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
function loadAdminPanel(client) {
  const adminChannel = client.channels.cache.get(client.config.adminChannelId);
  if (!adminChannel) {
    console.warn('–ê–¥–º–∏–Ω-–∫–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–∞–Ω–µ–ª—å –Ω–µ –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
    return;
  }

  // –û—á–∏—Å—Ç–∫–∞ –∫–∞–Ω–∞–ª–∞ –æ—Ç —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  adminChannel.messages.fetch().then(messages => {
    const botMessages = messages.filter(m => m.author.id === client.user.id);
    adminChannel.bulkDelete(botMessages).catch(() => {});
  }).then(() => {
    // –°–æ–∑–¥–∞–Ω–∏–µ –≤—Å—Ç—Ä–∞–∏–≤–∞–µ–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–∞–Ω–µ–ª–∏
    const embed = new EmbedBuilder()
      .setTitle('–ê–¥–º–∏–Ω –ü–∞–Ω–µ–ª—å –£–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ë–æ—Ç–æ–º')
      .setDescription('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º')
      .setColor(0x5865F2)
      .addFields(
        { name: '–°—Ç–∞—Ç—É—Å', value: 'üü¢ –û–Ω–ª–∞–π–Ω', inline: true },
        { name: '–°–µ—Ä–≤–µ—Ä–æ–≤', value: client.guilds.cache.size.toString(), inline: true },
        { name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', value: client.guilds.cache.reduce((acc, guild) => acc + guild.memberCount, 0).toString(), inline: true }
      );

    // –ü–µ—Ä–≤—ã–π —Ä—è–¥ –∫–Ω–æ–ø–æ–∫
    const row1 = new ActionRowBuilder().addComponents(
      new ButtonBuilder()
        .setCustomId('add_role_pair')
        .setLabel('–î–æ–±–∞–≤–∏—Ç—å —Å–≤—è–∑—å —Ä–æ–ª–µ–π')
        .setStyle(ButtonStyle.Primary),
      new ButtonBuilder()
        .setCustomId('remove_role_pair')
        .setLabel('–£–¥–∞–ª–∏—Ç—å —Å–≤—è–∑—å —Ä–æ–ª–µ–π')
        .setStyle(ButtonStyle.Danger),
      new ButtonBuilder()
        .setCustomId('list_role_pairs')
        .setLabel('–°–ø–∏—Å–æ–∫ —Å–≤—è–∑–µ–π')
        .setStyle(ButtonStyle.Secondary)
    );

    // –í—Ç–æ—Ä–æ–π —Ä—è–¥ –∫–Ω–æ–ø–æ–∫
    const row2 = new ActionRowBuilder().addComponents(
      new ButtonBuilder()
        .setCustomId('add_admin')
        .setLabel('–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞')
        .setStyle(ButtonStyle.Success),
      new ButtonBuilder()
        .setCustomId('bot_status')
        .setLabel('–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞')
        .setStyle(ButtonStyle.Secondary),
      new ButtonBuilder()
        .setCustomId('report_settings')
        .setLabel('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–ø–æ—Ä—Ç–æ–≤')
        .setStyle(ButtonStyle.Primary)
    );

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∞–Ω–µ–ª–∏
    adminChannel.send({ embeds: [embed], components: [row1, row2] })
      .then(() => sendLog(client, '–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞', 'success'))
      .catch(err => sendLog(client, `–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏: ${err.message}`, 'error'));
  });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π —Å –∫–Ω–æ–ø–∫–∞–º–∏
async function handlePanelInteraction(interaction, client) {
  if (!interaction.isButton()) return;
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
  const { isAdmin } = require('../utils/checks');
  if (!isAdmin(client, interaction.user.id)) {
    return interaction.reply({ 
      content: '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –ø–∞–Ω–µ–ª–∏!',
      flags: MessageFlags.Ephemeral
    });
  }

  try {
    // –î–ª—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –Ω–µ –¥–µ–ª–∞–µ–º deferReply
    if (interaction.customId === 'add_admin' || 
        interaction.customId === 'add_role_pair' || 
        interaction.customId === 'remove_role_pair') {
      switch (interaction.customId) {
        case 'add_admin':
          return await showAddAdminModal(interaction, client);
        case 'add_role_pair':
          return await showAddRolePairModal(interaction, client);
        case 'remove_role_pair':
          return await showRemoveRolePairModal(interaction, client);
      }
    }

    // –î–ª—è –¥—Ä—É–≥–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π –¥–µ–ª–∞–µ–º deferReply
    await interaction.deferReply({ ephemeral: true });

    switch (interaction.customId) {
      case 'list_role_pairs':
        await showRolePairsList(interaction, client);
        break;
      case 'bot_status':
        await showBotStatus(interaction, client);
        break;
      case 'report_settings':
        await showReportSettings(interaction, client);
        break;
      default:
        await interaction.editReply({ content: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞' });
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è:', error);
    if (interaction.replied || interaction.deferred) {
      await interaction.editReply({ 
        content: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã',
        flags: MessageFlags.Ephemeral
      });
    } else {
      await interaction.reply({ 
        content: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã',
        flags: MessageFlags.Ephemeral
      });
    }
  }
}

// –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–≤—è–∑–∏ —Ä–æ–ª–µ–π
async function showAddRolePairModal(interaction, client) {
  const modal = new ModalBuilder()
    .setCustomId('add_role_modal')
    .setTitle('–î–æ–±–∞–≤–∏—Ç—å —Å–≤—è–∑—å —Ä–æ–ª–µ–π');

  const mainRoleInput = new TextInputBuilder()
    .setCustomId('main_role_id')
    .setLabel('ID —Ä–æ–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ')
    .setStyle(TextInputStyle.Short)
    .setRequired(true);

  const adminRoleInput = new TextInputBuilder()
    .setCustomId('admin_role_id')
    .setLabel('ID —Ä–æ–ª–∏ –Ω–∞ –∞–¥–º–∏–Ω —Å–µ—Ä–≤–µ—Ä–µ')
    .setStyle(TextInputStyle.Short)
    .setRequired(true);

  const firstActionRow = new ActionRowBuilder().addComponents(mainRoleInput);
  const secondActionRow = new ActionRowBuilder().addComponents(adminRoleInput);

  modal.addComponents(firstActionRow, secondActionRow);

  await interaction.showModal(modal).catch(error => {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞:', error);
    interaction.reply({
      content: '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–≤—è–∑–∏ —Ä–æ–ª–µ–π',
      flags: MessageFlags.Ephemeral
    });
  });
}

// –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–≤—è–∑–∏ —Ä–æ–ª–µ–π
async function showRemoveRolePairModal(interaction, client) {
  const modal = new ModalBuilder()
    .setCustomId('remove_role_modal')
    .setTitle('–£–¥–∞–ª–∏—Ç—å —Å–≤—è–∑—å —Ä–æ–ª–µ–π');

  const roleInput = new TextInputBuilder()
    .setCustomId('role_id')
    .setLabel('ID —Ä–æ–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ')
    .setStyle(TextInputStyle.Short)
    .setRequired(true);

  const actionRow = new ActionRowBuilder().addComponents(roleInput);

  modal.addComponents(actionRow);

  await interaction.showModal(modal).catch(error => {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞:', error);
    interaction.reply({
      content: '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É —É–¥–∞–ª–µ–Ω–∏—è —Å–≤—è–∑–∏ —Ä–æ–ª–µ–π',
      flags: MessageFlags.Ephemeral
    });
  });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
async function handleModalSubmit(interaction, client) {
  if (!interaction.isModalSubmit()) return;

  try {
    if (interaction.customId === 'add_role_modal') {
      const mainRoleId = interaction.fields.getTextInputValue('main_role_id');
      const adminRoleId = interaction.fields.getTextInputValue('admin_role_id');

      const mainGuild = client.guilds.cache.get(client.config.mainServerId);
      const adminGuild = client.guilds.cache.get(client.config.adminServerId);
      
      const mainRole = mainGuild?.roles.cache.get(mainRoleId);
      const adminRole = adminGuild?.roles.cache.get(adminRoleId);
      
      if (!mainRole || !adminRole) {
        return await interaction.reply({ 
          content: '‚ùå –û–¥–Ω–∞ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —Ä–æ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ',
          flags: MessageFlags.Ephemeral
        });
      }

      client.config.rolePairs[mainRoleId] = adminRoleId;
      fs.writeFileSync(
        path.join(__dirname, '../../config/config.json'),
        JSON.stringify(client.config, null, 2)
      );

      await interaction.reply({ 
        content: `‚úÖ –°–≤—è–∑—å —Ä–æ–ª–µ–π —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞: ${mainRole.name} (${mainRoleId}) ‚Üí ${adminRole.name} (${adminRoleId})`,
        flags: MessageFlags.Ephemeral
      });
      sendLog(client, `–î–æ–±–∞–≤–ª–µ–Ω–∞ —Å–≤—è–∑—å —Ä–æ–ª–µ–π: ${mainRole.name} (${mainRoleId}) ‚Üí ${adminRole.name} (${adminRoleId})`, 'info');
    } 
    else if (interaction.customId === 'remove_role_modal') {
      const roleId = interaction.fields.getTextInputValue('role_id');

      if (!client.config.rolePairs[roleId]) {
        return await interaction.reply({ 
          content: '‚ùå –°–≤—è–∑—å –¥–ª—è —ç—Ç–æ–π —Ä–æ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞',
          flags: MessageFlags.Ephemeral
        });
      }

      const mainGuild = client.guilds.cache.get(client.config.mainServerId);
      const adminGuild = client.guilds.cache.get(client.config.adminServerId);
      const mainRole = mainGuild?.roles.cache.get(roleId);
      const adminRoleId = client.config.rolePairs[roleId];
      const adminRole = adminGuild?.roles.cache.get(adminRoleId);

      delete client.config.rolePairs[roleId];
      fs.writeFileSync(
        path.join(__dirname, '../../config/config.json'),
        JSON.stringify(client.config, null, 2)
      );

      await interaction.reply({ 
        content: `‚úÖ –°–≤—è–∑—å —Ä–æ–ª–µ–π —É–¥–∞–ª–µ–Ω–∞: ${mainRole?.name || roleId} ‚Üí ${adminRole?.name || adminRoleId}`,
        flags: MessageFlags.Ephemeral
      });
      sendLog(client, `–£–¥–∞–ª–µ–Ω–∞ —Å–≤—è–∑—å —Ä–æ–ª–µ–π: ${mainRole?.name || roleId} ‚Üí ${adminRole?.name || adminRoleId}`, 'info');
    }
    else if (interaction.customId === 'add_admin_modal') {
      const userId = interaction.fields.getTextInputValue('user_id');
      const user = await client.users.fetch(userId).catch(() => null);
      
      if (!user) {
        return interaction.reply({
          content: '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω!',
          flags: MessageFlags.Ephemeral
        });
      }

      const adminsPath = path.join(__dirname, '../../config/admins.json');
      const admins = JSON.parse(fs.readFileSync(adminsPath, 'utf8'));

      if (admins.includes(userId)) {
        return interaction.reply({
          content: '‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!',
          flags: MessageFlags.Ephemeral
        });
      }

      admins.push(userId);
      fs.writeFileSync(adminsPath, JSON.stringify(admins, null, 2));

      await interaction.reply({
        content: `‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.tag} (${userId}) –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã!`,
        flags: MessageFlags.Ephemeral
      });
      sendLog(client, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.tag} (${userId}) –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã`, 'info');
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞:', error);
    await interaction.reply({
      content: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞',
      flags: MessageFlags.Ephemeral
    });
  }
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–≤—è–∑–µ–π —Ä–æ–ª–µ–π
async function showRolePairsList(interaction, client) {
  const rolePairs = client.config.rolePairs;
  if (Object.keys(rolePairs).length === 0) {
    return interaction.editReply({ content: '–ù–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Å–≤—è–∑–µ–π —Ä–æ–ª–µ–π.' });
  }

  const mainGuild = client.guilds.cache.get(client.config.mainServerId);
  const adminGuild = client.guilds.cache.get(client.config.adminServerId);
  
  let description = '';
  for (const [mainRoleId, adminRoleId] of Object.entries(rolePairs)) {
    const mainRole = mainGuild?.roles.cache.get(mainRoleId);
    const adminRole = adminGuild?.roles.cache.get(adminRoleId);
    
    description += `üîπ ${mainRole?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å'} (${mainRoleId}) ‚Üí ${adminRole?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å'} (${adminRoleId})\n`;
  }

  const embed = new EmbedBuilder()
    .setTitle('–°–ø–∏—Å–æ–∫ —Å–≤—è–∑–µ–π —Ä–æ–ª–µ–π')
    .setDescription(description)
    .setColor(0x5865F2);

  await interaction.editReply({ embeds: [embed] });
}

// –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async function showAddAdminModal(interaction, client) {
  // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —ç—Ç–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å
  if (interaction.user.id !== client.config.creatorId) {
    if (interaction.replied || interaction.deferred) {
      return interaction.editReply({ 
        content: '–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –±–æ—Ç–∞ –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!',
        flags: MessageFlags.Ephemeral
      });
    } else {
      return interaction.reply({ 
        content: '–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –±–æ—Ç–∞ –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!',
        flags: MessageFlags.Ephemeral
      });
    }
  }

  const modal = new ModalBuilder()
    .setCustomId('add_admin_modal')
    .setTitle('–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');

  const userIdInput = new TextInputBuilder()
    .setCustomId('user_id')
    .setLabel('ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è')
    .setStyle(TextInputStyle.Short)
    .setRequired(true);

  const actionRow = new ActionRowBuilder().addComponents(userIdInput);

  modal.addComponents(actionRow);

  await interaction.showModal(modal).catch(error => {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞:', error);
    if (interaction.replied || interaction.deferred) {
      interaction.editReply({
        content: '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
        flags: MessageFlags.Ephemeral
      });
    } else {
      interaction.reply({
        content: '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
        flags: MessageFlags.Ephemeral
      });
    }
  });
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞
async function showBotStatus(interaction, client) {
  const embed = new EmbedBuilder()
    .setTitle('–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞')
    .setColor(0x5865F2)
    .addFields(
      { name: '–ü–∏–Ω–≥', value: `${client.ws.ping}ms`, inline: true },
      { name: '–ê–ø—Ç–∞–π–º', value: formatUptime(process.uptime()), inline: true },
      { name: '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏', value: `${(process.memoryUsage().heapUsed / 1024 / 1024).toFixed(2)} MB`, inline: true },
      { name: '–°–µ—Ä–≤–µ—Ä–æ–≤', value: client.guilds.cache.size.toString(), inline: true },
      { name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', value: client.guilds.cache.reduce((acc, guild) => acc + guild.memberCount, 0).toString(), inline: true }
    );

  await interaction.editReply({ embeds: [embed] });
}

// –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–ø–æ—Ä—Ç–æ–≤
async function showReportSettings(interaction, client) {
  const embed = new EmbedBuilder()
    .setTitle('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã —Ä–µ–ø–æ—Ä—Ç–æ–≤')
    .addFields(
      { name: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è —Ä–µ–ø–æ—Ä—Ç–æ–≤', value: client.config.reportSettings.categoryId || '–ù–µ –∑–∞–¥–∞–Ω–∞', inline: true },
      { name: '–ö–∞–Ω–∞–ª –¥–ª—è —Ä–µ–ø–æ—Ä—Ç–æ–≤ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏)', value: client.config.reportSettings.userReportChannel || '–ù–µ –∑–∞–¥–∞–Ω', inline: true },
      { name: '–ö–∞–Ω–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–∞–¥–º–∏–Ω—ã)', value: client.config.reportSettings.adminReportChannel || '–ù–µ –∑–∞–¥–∞–Ω', inline: true }
    )
    .setColor(0x5865F2);

  const row = new ActionRowBuilder().addComponents(
    new ButtonBuilder()
      .setCustomId('set_report_category')
      .setLabel('–ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é')
      .setStyle(ButtonStyle.Primary),
    new ButtonBuilder()
      .setCustomId('set_user_report_channel')
      .setLabel('–ò–∑–º–µ–Ω–∏—Ç—å –∫–∞–Ω–∞–ª –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
      .setStyle(ButtonStyle.Secondary),
    new ButtonBuilder()
      .setCustomId('set_admin_report_channel')
      .setLabel('–ò–∑–º–µ–Ω–∏—Ç—å –∫–∞–Ω–∞–ª –¥–ª—è –∞–¥–º–∏–Ω–æ–≤')
      .setStyle(ButtonStyle.Secondary)
  );

  await interaction.editReply({ embeds: [embed], components: [row] });
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∞–ø—Ç–∞–π–º–∞
function formatUptime(seconds) {
  const days = Math.floor(seconds / (3600 * 24));
  seconds %= 3600 * 24;
  const hours = Math.floor(seconds / 3600);
  seconds %= 3600;
  const minutes = Math.floor(seconds / 60);
  seconds %= 60;
  
  return `${days}d ${hours}h ${minutes}m ${Math.floor(seconds)}s`;
}

module.exports = { 
  loadAdminPanel, 
  handlePanelInteraction,
  handleModalSubmit
};